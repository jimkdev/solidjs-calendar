const isLeapYear = (year:number) => {
	if(year % 4 == 0 || (year % 100 == 0 && year % 400 == 0)) {
		return true;
	}

	return false;
};

export const getMonthName = (index:number, months:string[]):string => {
	return months[index];
};

export const getNextMonth = (currentMonth:number):number => {
	return (currentMonth === 11 ? 0 : currentMonth + 1);
};

export const getPreviousMonth = (currentMonth:number):number => {
	return (currentMonth === 0 ? 11 : currentMonth - 1);
};

export const getNextYear = (currentMonth:number, currentYear:number):number => {
	return (currentMonth === 0 ? currentYear + 1 : currentYear);
};

export const getPreviousYear = (currentMonth:number, currentYear:number):number => {
	return (currentMonth === 11 ? currentYear - 1 : currentYear);
};

export const getNextDay = (currentDay: number): number => {
	return (currentDay === 6 ? 0 : currentDay + 1);
};

export const getPreviousDay = (currentDay: number): number => {
	return (currentDay === 0 ? 6 : currentDay - 1);
};

export const getTotalMonthDays = (currentMonth:number, currentYear:number):number => {
	// Get total days for February
	if(currentMonth === 1) {
		if(isLeapYear(currentYear)) {
			return 29;
		}
		return 28;
	}

	// Get total days for April, June, September and November
	if(currentMonth === 3 || currentMonth === 5 || currentMonth === 8 || currentMonth === 10) {
		return 30;
	}

	return 31;
};

export const createNewDate = (currentDay:number, currentMonth:number, currentYear:number):Date => {
	const formattedDay = formatDateDayOrMonth(currentDay.toString());
	const formattedMonth = formatDateDayOrMonth(currentMonth.toString());
	
	return new Date(`${currentYear}-${formattedMonth}-${formattedDay}`);
};

export const formatDateDayOrMonth = (currentDayOrMonth:string):string => {
	return (currentDayOrMonth.length === 2 ? currentDayOrMonth : `0${currentDayOrMonth}`);
};

export const getWeeks = (startDate:number, totalDays:number):number[][] => {
	const weeks:number[][] = [];
	let currentDay = 1;

	let offset = 0;

	for(let i = 0; i < 1; i++) {
		for(let j = i; j < 7 + i; j++) {
			if(j < startDate) {
				offset++;
			}
		}
	}

	for(let i = 0; i < totalDays/7 + offset; i++) {
		const week:number[] = [];
		for(let j = i; j < 7 + i; j++) {
			if(j < startDate && i === 0) {
				week[j] = 0;
				continue;
			}
			if(currentDay > totalDays && currentDay) {
				break;
			}
			
			week.push(currentDay++);
		}

		if(week.length === 0) break; // Remove empty arrays generated by offset
		weeks.push(week);
	}

	return weeks;
};

